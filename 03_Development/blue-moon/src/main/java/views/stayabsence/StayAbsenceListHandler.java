package views.stayabsence;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import models.StayAbsenceRecord;
import services.StayAbsenceService;
import views.BaseScreenWithLogoutAndGoBackHandler;
import views.messages.ConfirmationDialog;
import views.messages.ErrorDialog;
import views.messages.InformationDialog;

import java.time.format.DateTimeFormatter;
import java.util.List;

public class StayAbsenceListHandler extends BaseScreenWithLogoutAndGoBackHandler {
    @FXML private Label lblUserName;
    @FXML private TableView<StayAbsenceRecord> tvRecords;
    @FXML private TableColumn<StayAbsenceRecord, Integer> colRecordId;
    @FXML private TableColumn<StayAbsenceRecord, String> colRecordType;
    @FXML private TableColumn<StayAbsenceRecord, String> colPersonName;
    @FXML private TableColumn<StayAbsenceRecord, String> colHousehold;
    @FXML private TableColumn<StayAbsenceRecord, String> colPeriod;
    @FXML private TableColumn<StayAbsenceRecord, String> colStartDate;
    @FXML private TableColumn<StayAbsenceRecord, String> colEndDate;
    @FXML private TableColumn<StayAbsenceRecord, String> colStatus;
    @FXML private TableColumn<StayAbsenceRecord, Void> colActions;
    
    @FXML private ComboBox<String> cbRecordType;
    @FXML private ComboBox<String> cbStatus;
    @FXML private TextField tfSearch;
    @FXML private Button btnSearch;
    @FXML private Button btnRefresh;
    
    private StayAbsenceService stayAbsenceService;
    private ObservableList<StayAbsenceRecord> recordList;
    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    
    public StayAbsenceListHandler(Stage stage, String userName) throws Exception {
        super(stage, utils.Configs.STAY_ABSENCE_LIST_SCREEN, utils.Configs.LOGO_PATH, "Danh s√°ch t·∫°m tr√∫ & t·∫°m v·∫Øng");
        this.stayAbsenceService = new StayAbsenceService();
        this.recordList = FXCollections.observableArrayList();
        
        loader.setController(this);
        this.setContent();
        this.setScene();
        this.setUsername(userName);
    }
    
    @FXML
    public void initialize() {
    	super.initialize();
        setupFilters();
        setupTableColumns();
        setupEventHandlers();
        loadRecords();
    }
    
    private void setUsername(String userName) {
        lblUserName.setText(userName);
    }
    
    private void setupFilters() {
        cbRecordType.getItems().addAll("T·∫•t c·∫£", "T·∫°m tr√∫", "T·∫°m v·∫Øng");
        cbRecordType.setValue("T·∫•t c·∫£");
        
        cbStatus.getItems().addAll("T·∫•t c·∫£", "ƒêang ho·∫°t ƒë·ªông", "ƒê√£ h·∫øt h·∫°n", "ƒê√£ h·ªßy");
        cbStatus.setValue("T·∫•t c·∫£");
        
        tfSearch.setPromptText("Nh·∫≠p t√™n, CCCD, ph√≤ng ƒë·ªÉ t√¨m ki·∫øm...");
    }
    
    private void setupTableColumns() {
        colRecordId.setCellValueFactory(new PropertyValueFactory<>("recordId"));
        
        colRecordType.setCellValueFactory(cellData -> {
            String type = cellData.getValue().getRecordType();
            String displayType = StayAbsenceRecord.TYPE_TEMPORARY_STAY.equals(type) ? "T·∫°m tr√∫" : "T·∫°m v·∫Øng";
            return new SimpleStringProperty(displayType);
        });
        
        colPersonName.setCellValueFactory(cellData -> {
            StayAbsenceRecord record = cellData.getValue();
            String name = record.getTempResidentName() != null ? 
                         record.getTempResidentName() : record.getResidentName();
            return new SimpleStringProperty(name != null ? name : "N/A");
        });
        
        colHousehold.setCellValueFactory(cellData -> {
            String household = cellData.getValue().getHouseholdName();
            return new SimpleStringProperty(household != null ? "Ph√≤ng " + household : "N/A");
        });
        
        colPeriod.setCellValueFactory(new PropertyValueFactory<>("period"));
        
        colStartDate.setCellValueFactory(cellData -> {
            return new SimpleStringProperty(
                cellData.getValue().getStartDate() != null ? 
                cellData.getValue().getStartDate().format(dateFormatter) : "N/A"
            );
        });
        
        colEndDate.setCellValueFactory(cellData -> {
            return new SimpleStringProperty(
                cellData.getValue().getEndDate() != null ? 
                cellData.getValue().getEndDate().format(dateFormatter) : "N/A"
            );
        });
        
        colStatus.setCellValueFactory(cellData -> {
            String status = cellData.getValue().getStatus();
            String displayStatus = "N/A";
            if (StayAbsenceRecord.STATUS_ACTIVE.equals(status)) {
                displayStatus = "ƒêang ho·∫°t ƒë·ªông";
            } else if (StayAbsenceRecord.STATUS_EXPIRED.equals(status)) {
                displayStatus = "ƒê√£ h·∫øt h·∫°n";
            } else if (StayAbsenceRecord.STATUS_CANCELLED.equals(status)) {
                displayStatus = "ƒê√£ h·ªßy";
            }
            return new SimpleStringProperty(displayStatus);
        });
        
        colActions.setCellFactory(col -> new TableCell<StayAbsenceRecord, Void>() {
            private final Button btnDetails = new Button("Chi ti·∫øt");
            private final Button btnCancel = new Button("H·ªßy");
            private final HBox actionBox = new HBox(5);
            
            {
                btnDetails.setStyle("-fx-background-color: #3498db; -fx-text-fill: white; -fx-font-size: 12px; -fx-cursor: hand;");
                btnCancel.setStyle("-fx-background-color: #e74c3c; -fx-text-fill: white; -fx-font-size: 12px; -fx-cursor: hand;");
                
                actionBox.setAlignment(Pos.CENTER);
                actionBox.getChildren().addAll(btnDetails, btnCancel);
                
                btnDetails.setOnAction(e -> {
                    StayAbsenceRecord record = getTableView().getItems().get(getIndex());
                    showRecordDetails(record);
                });
                
                btnCancel.setOnAction(e -> {
                    StayAbsenceRecord record = getTableView().getItems().get(getIndex());
                    cancelRecord(record);
                });
            }
            
            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    StayAbsenceRecord record = getTableView().getItems().get(getIndex());
                    
                    if (StayAbsenceRecord.STATUS_ACTIVE.equals(record.getStatus())) {
                        actionBox.getChildren().clear();
                        actionBox.getChildren().addAll(btnDetails, btnCancel);
                    } else {
                        actionBox.getChildren().clear();
                        actionBox.getChildren().add(btnDetails);
                    }
                    
                    setGraphic(actionBox);
                }
            }
        });
        
        tvRecords.setItems(recordList);
    }
    
    private void setupEventHandlers() {
        btnSearch.setOnAction(e -> performSearch());
        btnRefresh.setOnAction(e -> loadRecords());
        tfSearch.setOnAction(e -> performSearch());
        cbRecordType.setOnAction(e -> performSearch());
        cbStatus.setOnAction(e -> performSearch());
        
        // Th√™m tooltip cho button refresh
        Tooltip refreshTooltip = new Tooltip("L√†m m·ªõi danh s√°ch v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t h·ªì s∆° h·∫øt h·∫°n");
        Tooltip.install(btnRefresh, refreshTooltip);
    }
    
    private void loadRecords() {
        try {
            // üîÑ Auto-check v√† update expired records tr∆∞·ªõc khi load
            int expiredCount = stayAbsenceService.updateExpiredRecords();
            if (expiredCount > 0) {
                System.out.println("üìÖ Auto-updated " + expiredCount + " expired records");
                // Hi·ªÉn th·ªã th√¥ng b√°o cho user
                InformationDialog.showNotification("C·∫≠p nh·∫≠t t·ª± ƒë·ªông", 
                    "üìÖ ƒê√£ t·ª± ƒë·ªông c·∫≠p nh·∫≠t " + expiredCount + " h·ªì s∆° h·∫øt h·∫°n.\n" +
                    "C√°c h·ªì s∆° n√†y ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i 'ƒê√£ h·∫øt h·∫°n'.");
            }
            
            List<StayAbsenceRecord> records = stayAbsenceService.getAllRecords();
            recordList.clear();
            recordList.addAll(records);
            
            System.out.println("‚úÖ Loaded " + records.size() + " records");
        } catch (Exception e) {
            ErrorDialog.showError("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªì s∆°: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void performSearch() {
        try {
            // üîÑ Auto-check expired records tr∆∞·ªõc khi search
            stayAbsenceService.updateExpiredRecords();
            
            String searchKeyword = tfSearch.getText().trim();
            String selectedType = cbRecordType.getValue();
            String selectedStatus = cbStatus.getValue();
            
            List<StayAbsenceRecord> allRecords;
            
            if (searchKeyword.isEmpty()) {
                allRecords = stayAbsenceService.getAllRecords();
            } else {
                allRecords = stayAbsenceService.searchRecords(searchKeyword);
            }
            
            if (!"T·∫•t c·∫£".equals(selectedType)) {
                String filterType = "T·∫°m tr√∫".equals(selectedType) ? 
                                  StayAbsenceRecord.TYPE_TEMPORARY_STAY : 
                                  StayAbsenceRecord.TYPE_TEMPORARY_ABSENCE;
                allRecords = allRecords.stream()
                    .filter(record -> filterType.equals(record.getRecordType()))
                    .toList();
            }
            
            if (!"T·∫•t c·∫£".equals(selectedStatus)) {
                String filterStatus;
                switch (selectedStatus) {
                    case "ƒêang ho·∫°t ƒë·ªông" -> filterStatus = StayAbsenceRecord.STATUS_ACTIVE;
                    case "ƒê√£ h·∫øt h·∫°n" -> filterStatus = StayAbsenceRecord.STATUS_EXPIRED;
                    case "ƒê√£ h·ªßy" -> filterStatus = StayAbsenceRecord.STATUS_CANCELLED;
                    default -> filterStatus = "";
                }
                allRecords = allRecords.stream()
                    .filter(record -> filterStatus.equals(record.getStatus()))
                    .toList();
            }
            
            recordList.clear();
            recordList.addAll(allRecords);
            
            System.out.println("üîç Search results: " + allRecords.size() + " records found");
            
        } catch (Exception e) {
            ErrorDialog.showError("L·ªói t√¨m ki·∫øm", "Kh√¥ng th·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void showRecordDetails(StayAbsenceRecord record) {
        try {
            StringBuilder details = new StringBuilder();
            details.append("üìã CHI TI·∫æT H·ªí S∆† #").append(record.getRecordId()).append("\n\n");
            
            if (StayAbsenceRecord.TYPE_TEMPORARY_STAY.equals(record.getRecordType())) {
                details.append("üè† TH√îNG TIN T·∫†M TR√ö\n");
                details.append("‚Ä¢ H·ªç t√™n: ").append(record.getTempResidentName()).append("\n");
                if (record.getTempResidentCccd() != null) {
                    details.append("‚Ä¢ CCCD: ").append(record.getTempResidentCccd()).append("\n");
                }
                details.append("‚Ä¢ Ng√†y sinh: ").append(
                    record.getTempResidentBirthDate() != null ? 
                    record.getTempResidentBirthDate().format(dateFormatter) : "N/A"
                ).append("\n");
                details.append("‚Ä¢ Gi·ªõi t√≠nh: ").append(record.getTempResidentGender()).append("\n");
                if (record.getTempResidentPhone() != null) {
                    details.append("‚Ä¢ SƒêT: ").append(record.getTempResidentPhone()).append("\n");
                }
                if (record.getTempResidentHometown() != null) {
                    details.append("‚Ä¢ Qu√™ qu√°n: ").append(record.getTempResidentHometown()).append("\n");
                }
            } else {
                details.append("‚úàÔ∏è TH√îNG TIN T·∫†M V·∫ÆNG\n");
                details.append("‚Ä¢ Th√†nh vi√™n: ").append(record.getResidentName()).append("\n");
                details.append("‚Ä¢ ƒê·ªãa ƒëi·ªÉm ƒë·∫øn: ").append(record.getTempAddress()).append("\n");
            }
            
            details.append("\nüè° TH√îNG TIN H·ªò KH·∫®U\n");
            details.append("‚Ä¢ H·ªô kh·∫©u: Ph√≤ng ").append(record.getHouseholdName()).append("\n");
            
            details.append("\n‚è∞ TH·ªúI GIAN\n");
            details.append("‚Ä¢ T·ª´ ng√†y: ").append(
                record.getStartDate() != null ? record.getStartDate().format(dateFormatter) : "N/A"
            ).append("\n");
            details.append("‚Ä¢ ƒê·∫øn ng√†y: ").append(
                record.getEndDate() != null ? record.getEndDate().format(dateFormatter) : "N/A"
            ).append("\n");
            details.append("‚Ä¢ Th·ªùi gian: ").append(record.getPeriod()).append("\n");
            
            details.append("\nüìù TH√îNG TIN KH√ÅC\n");
            details.append("‚Ä¢ Ng√†y t·∫°o: ").append(
                record.getCreatedDate() != null ? record.getCreatedDate().format(dateFormatter) : "N/A"
            ).append("\n");
            details.append("‚Ä¢ Tr·∫°ng th√°i: ");
            switch (record.getStatus()) {
                case StayAbsenceRecord.STATUS_ACTIVE -> details.append("ƒêang ho·∫°t ƒë·ªông");
                case StayAbsenceRecord.STATUS_EXPIRED -> details.append("ƒê√£ h·∫øt h·∫°n");
                case StayAbsenceRecord.STATUS_CANCELLED -> details.append("ƒê√£ h·ªßy");
                default -> details.append("N/A");
            }
            details.append("\n");
            
            if (record.getRequestDesc() != null && !record.getRequestDesc().trim().isEmpty()) {
                details.append("‚Ä¢ L√Ω do: ").append(record.getRequestDesc()).append("\n");
            }
            
            InformationDialog.showNotification("Chi ti·∫øt h·ªì s∆°", details.toString());
            
        } catch (Exception e) {
            ErrorDialog.showError("L·ªói", "Kh√¥ng th·ªÉ hi·ªÉn th·ªã chi ti·∫øt h·ªì s∆°!");
            e.printStackTrace();
        }
    }
    
    private void cancelRecord(StayAbsenceRecord record) {
        try {
            String recordType = StayAbsenceRecord.TYPE_TEMPORARY_STAY.equals(record.getRecordType()) ? 
                               "t·∫°m tr√∫" : "t·∫°m v·∫Øng";
            String personName = record.getTempResidentName() != null ? 
                               record.getTempResidentName() : record.getResidentName();
            
            String message = "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy h·ªì s∆° " + recordType + " cho " + personName + "?\n\n" +
                           "H·ªì s∆° #" + record.getRecordId() + " s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† 'ƒê√£ h·ªßy'.\n" +
                           "H√†nh ƒë·ªông n√†y c√≥ th·ªÉ ƒë∆∞·ª£c ho√†n t√°c b·∫±ng c√°ch c·∫≠p nh·∫≠t tr·∫°ng th√°i.";
                           
            String result = ConfirmationDialog.getOption(message);
            
            if ("YES".equals(result)) {
                boolean success = stayAbsenceService.cancelRecord(record.getRecordId());
                
                if (success) {
                    InformationDialog.showNotification("Th√†nh c√¥ng", 
                        "‚úÖ ƒê√£ h·ªßy h·ªì s∆° " + recordType + " cho " + personName + "!");
                    
                    performSearch();
                } else {
                    ErrorDialog.showError("L·ªói", "Kh√¥ng th·ªÉ h·ªßy h·ªì s∆°!");
                }
            }
            
        } catch (Exception e) {
            ErrorDialog.showError("L·ªói h·ªá th·ªëng", "Kh√¥ng th·ªÉ h·ªßy h·ªì s∆°: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 