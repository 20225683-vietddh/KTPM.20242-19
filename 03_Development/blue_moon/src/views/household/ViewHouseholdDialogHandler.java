package views.household;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import controllers.household.HouseholdController;
import exception.HouseholdAlreadyExistsException;
import exception.HouseholdNotExist;
import exception.InvalidHouseholdDataException;
import exception.ResidentNotFoundException;
import exception.ServiceException;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import models.Household;
import models.Resident;
import models.Room;
import services.household.HouseholdService;
import services.household.HouseholdServiceImpl;
import services.resident.ResidentService;
import services.resident.ResidentServiceImpl;
import services.room.RoomService;
import services.room.RoomServiceImpl;
import utils.Configs;
import utils.SceneUtils.HouseholdDialogHandler;

public class ViewHouseholdDialogHandler implements HouseholdDialogHandler {

	
	// You need to initialize this
	private HouseholdController householdController ; // You need to initialize this
	private ResidentService residentService = new ResidentServiceImpl();
	private RoomService roomService = new RoomServiceImpl();
	
	private Household currentHousehold;
	private Runnable onSuccessCallback;
	private boolean isEditMode = false;
	
	private String oldRoomNumber;


	// Text fields
	@FXML
	private TextField txtId;
	@FXML
	private TextField txtOwnerCCCD;
	@FXML
	private TextField txtOwnerName;
	@FXML
	private TextField txtAddress;
	@FXML
	private TextField txtArea;
	@FXML
	private TextField txtPhone;
	@FXML
	private TextField txtEmail;
	@FXML
	private TextField txtHouseholdSize;
	@FXML
	private TextField txtCreationDate;
	@FXML
	private ComboBox<Room> cmbRoom;
	@FXML
	private TextField txtCurrentRoom;

	// Controls
	@FXML
	private ToggleButton toggleEditMode;
	@FXML
	private Button btnUpdate;
	@FXML
	private Button btnClose;
	@FXML
	private Button btnMemberDetails;
	@FXML
	private Label lblRequiredNote;

	
	public ResidentService getMemberService() {
		return residentService;
	}

	public void setMemberService(ResidentService memberService) {
		this.residentService = memberService;
	}

	public HouseholdController getHouseholdController() {
		return householdController;
	}

	public void setHouseholdController(HouseholdController householdController) {
		this.householdController = householdController;
	}

	public RoomService getRoomService() {
		return roomService;
	}

	public void setRoomService(RoomService roomService) {
		this.roomService = roomService;
	}

	// Fields that should never be editable (auto-generated by system)
	private static final String VIEW_MODE_STYLE = "-fx-background-color: #f5f5f5; -fx-border-color: #d0d0d0; -fx-border-radius: 5; -fx-background-radius: 5;";
	private static final String EDIT_MODE_STYLE = "-fx-background-color: white; -fx-border-color: #43A5DC; -fx-border-radius: 5; -fx-background-radius: 5;";


	@Override
	public void setOnSuccessCallback(Runnable callback) {
		this.onSuccessCallback = callback;
	}
	
	public void updateAfterMemberDialog() throws ServiceException, HouseholdNotExist {
		currentHousehold = householdController.getHouseholdDetails(currentHousehold.getId());
		Resident owner = residentService.getResidentById(currentHousehold.getOwnerId());
		this.txtOwnerCCCD.setText(owner.getCitizenId());
		this.txtOwnerName.setText(owner.getFullName());
		this.txtHouseholdSize.setText(currentHousehold.getHouseholdSize()+"");
	}

	@FXML
	private void initialize() {
		// Initialize UI components
		setViewMode(); // Start in view mode
	}

	@Override
	public void setHousehold(Household household) {
		this.currentHousehold = household;
		
		// Kiểm tra xem FXML đã được khởi tạo chưa
		if (currentHousehold != null) {
			oldRoomNumber = household.getHouseNumber();
			try {
				fillFormData();
			} catch (ServiceException e) {
				System.err.println("Error filling form data: " + e.getMessage());
				e.printStackTrace();
			}
			try {
				loadAvailableRooms();
			} catch (SQLException e) {
				System.err.println("Error loading rooms: " + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	private void fillFormData() throws ServiceException {
		if (currentHousehold != null) {
			// Set ID
			if (txtId != null) {
				txtId.setText(String.valueOf(currentHousehold.getId()));
			}

			// Set owner info
			if (residentService != null) {
				Resident owner = residentService.getResidentById(currentHousehold.getOwnerId());
				if (owner != null) {
					if (txtOwnerCCCD != null) {
						txtOwnerCCCD.setText(owner.getCitizenId());
					}
					if (txtOwnerName != null) {
						
						txtOwnerName.setText(owner.getFullName());
					}
				}
			}
			
			// Set address
			if (txtAddress != null) {
				String fullAddress = "";
				if (currentHousehold.getStreet() != null && !currentHousehold.getStreet().isEmpty()) {
					fullAddress += currentHousehold.getStreet();
				}
				if (currentHousehold.getWard() != null && !currentHousehold.getWard().isEmpty()) {
					if (!fullAddress.isEmpty()) fullAddress += ", ";
					fullAddress += currentHousehold.getWard();
				}
				if (currentHousehold.getDistrict() != null && !currentHousehold.getDistrict().isEmpty()) {
					if (!fullAddress.isEmpty()) fullAddress += ", ";
					fullAddress += currentHousehold.getDistrict();
				}
				txtAddress.setText(fullAddress);
			}
			
			// Set other fields
			if (txtArea != null) {
				Float area = roomService.getAreaByRoomNumber(currentHousehold.getHouseNumber());
				txtArea.setText(area + "");
			}
			if (txtPhone != null) {
				txtPhone.setText(currentHousehold.getPhone());
			}
			if (txtEmail != null) {
				txtEmail.setText(currentHousehold.getEmail());
			}
			if (txtHouseholdSize != null) {
				txtHouseholdSize.setText(String.valueOf(currentHousehold.getHouseholdSize()));
			}
			if (txtCreationDate != null) {
				txtCreationDate.setText(currentHousehold.getCreationDate().toString());
			}
			
			// Set room in combobox
			if (cmbRoom != null && currentHousehold.getHouseNumber() != null && cmbRoom.getItems() != null) {
				for (Room room : cmbRoom.getItems()) {
					if (room.getRoomNumber().equals(currentHousehold.getHouseNumber())) {
						cmbRoom.setValue(room);
						break;
					}
				}
			}
		}
	}

	private void loadAvailableRooms() throws SQLException {
		try {
			if (roomService != null) {
				List<Room> availableRooms = roomService.getAvailableRooms();
				
				// Set current room in TextField
				if (currentHousehold != null && currentHousehold.getHouseNumber() != null) {
					Room currentRoom = roomService.getRoomByNumber(currentHousehold.getHouseNumber());
					if (currentRoom != null) {
						txtCurrentRoom.setText("Phòng " + currentRoom.getRoomNumber());
						
						// Remove current room from available rooms if it's in the list
						availableRooms = availableRooms.stream()
							.filter(room -> !room.getRoomNumber().equals(currentRoom.getRoomNumber()))
							.collect(Collectors.toList());
					}
				}
				
				cmbRoom.getItems().clear();
				cmbRoom.getItems().addAll(availableRooms);
				
				// Set display format for rooms
				cmbRoom.setConverter(new javafx.util.StringConverter<Room>() {
					@Override
					public String toString(Room room) {
						return room != null ? "Phòng " + room.getRoomNumber() : "";
					}
					
					@Override
					public Room fromString(String string) {
						return null;
					}
				});
			}
		} catch (Exception e) {
			System.err.println("Error loading available rooms: " + e.getMessage());
			e.printStackTrace();
		}
	}

	@FXML
	private void handleToggleEditMode() {
		isEditMode = toggleEditMode.isSelected();

		if (isEditMode) {
			setEditMode();
		} else {
			setViewMode();
		}
	}

	private void setViewMode() {
		isEditMode = false;
		
		if (toggleEditMode != null) {
			toggleEditMode.setSelected(false);
			toggleEditMode.setText("Tắt");
			toggleEditMode.setStyle(
					"-fx-background-color: #ffffff; -fx-text-fill: #43A5DC; -fx-cursor: hand; -fx-background-radius: 15;");
		}

		// Disable all editable fields
		setFieldEditable(txtId, false);
		setFieldEditable(txtOwnerCCCD, false);
		setFieldEditable(txtOwnerName, false);
		setFieldEditable(txtAddress, false);
		setFieldEditable(txtArea, false);
		setFieldEditable(txtPhone, false);
		setFieldEditable(txtEmail, false);
		setFieldEditable(txtHouseholdSize, false);
		setFieldEditable(txtCreationDate, false);
		
		// Disable combobox
		if (cmbRoom != null) {
			cmbRoom.setDisable(true);
			cmbRoom.setStyle(VIEW_MODE_STYLE);
		}

		// Update button disabled
		if (btnUpdate != null) {
			btnUpdate.setDisable(true);
			btnUpdate.setStyle(
					"-fx-background-color: #43A5DC; -fx-text-fill: white; -fx-cursor: hand; -fx-background-radius: 5; -fx-opacity: 0.5;");
		}

		// Hide required fields note
		if (lblRequiredNote != null) {
			lblRequiredNote.setVisible(false);
		}
		txtCurrentRoom.setDisable(true);
		txtCurrentRoom.setStyle(VIEW_MODE_STYLE);
	}

	private void setEditMode() {
		isEditMode = true;
		
		if (toggleEditMode != null) {
			toggleEditMode.setSelected(true);
			toggleEditMode.setText("Bật");
			toggleEditMode.setStyle(
					"-fx-background-color: #43A5DC; -fx-text-fill: white; -fx-cursor: hand; -fx-background-radius: 15;");
		}

		// Enable only specific editable fields
		
		setFieldEditable(txtPhone, true);
		setFieldEditable(txtEmail, true);
		
		// Enable combobox
		if (cmbRoom != null) {
			cmbRoom.setDisable(false);
			cmbRoom.setStyle(EDIT_MODE_STYLE);
		}

		// System-generated and restricted fields remain disabled
		setFieldEditable(txtArea, false);
		setFieldEditable(txtOwnerCCCD, false); 
		setFieldEditable(txtOwnerName, false);
		setFieldEditable(txtId, false);
		setFieldEditable(txtAddress, false);
		setFieldEditable(txtHouseholdSize, false);
		setFieldEditable(txtCreationDate, false);

		// Update button enabled
		if (btnUpdate != null) {
			btnUpdate.setDisable(false);
			btnUpdate.setStyle(
					"-fx-background-color: #43A5DC; -fx-text-fill: white; -fx-cursor: hand; -fx-background-radius: 5; -fx-opacity: 1.0;");
		}

		// Show required fields note
		if (lblRequiredNote != null) {
			lblRequiredNote.setVisible(true);
		}
		txtCurrentRoom.setDisable(true);
		cmbRoom.setStyle(EDIT_MODE_STYLE);
		txtCurrentRoom.setStyle(VIEW_MODE_STYLE);
	}

	private void setFieldEditable(TextField field, boolean editable) {
		if (field != null) {
			field.setEditable(editable);
			if (editable) {
				field.setStyle(EDIT_MODE_STYLE);
			} else {
				field.setStyle(VIEW_MODE_STYLE);
			}
		}
	}

	@FXML
	private void handleUpdate() throws HouseholdNotExist, HouseholdAlreadyExistsException, ResidentNotFoundException,
			InvalidHouseholdDataException {
		try {
			updateHouseholdFromForm();
			householdController.updateHousehold(currentHousehold, oldRoomNumber);
			showSuccessDialog("Thành công", "Cập nhật thông tin hộ khẩu thành công!");
			
			if (onSuccessCallback != null) {
				onSuccessCallback.run();
			}
			
			// Close the dialog
			Stage stage = (Stage) btnUpdate.getScene().getWindow();
			stage.close();
			
		} catch (ServiceException | SQLException e) {
			showErrorDialog("Có lỗi xảy ra khi cập nhật", e.getMessage());
			e.printStackTrace();
		}
	}

	private void updateHouseholdFromForm() throws ServiceException {
		if (currentHousehold != null) {
			// Update phone and email
			String phone = txtPhone.getText().trim();
			String email = txtEmail.getText().trim();
			
			// Validate phone and email
			if (phone.isEmpty()) {
				throw new ServiceException("Số điện thoại không được để trống");
			}
			if (email.isEmpty()) {
				throw new ServiceException("Email không được để trống");
			}
			
			currentHousehold.setPhone(phone);
			currentHousehold.setEmail(email);
			
			// Update room and area if a new room is selected
			Room selectedRoom = cmbRoom.getValue();
			if (selectedRoom != null) {
				currentHousehold.setHouseNumber(selectedRoom.getRoomNumber());
				
				// Update area from the selected room
				try {
					Float area = roomService.getAreaByRoomNumber(selectedRoom.getRoomNumber());
					txtArea.setText(area.toString());
				} catch (ServiceException e) {
					System.err.println("Error getting area for room " + selectedRoom.getRoomNumber() + ": " + e.getMessage());
				}
			}
		}
	}

	@FXML
	private void handleViewMemberDetails() throws HouseholdNotExist {
		if (currentHousehold == null) {
			showErrorDialog("Error", "Không có thông tin hộ khẩu!");
			return;
		}

		try {
			System.out.println("Getting members for household ID: " + currentHousehold.getId());
			// Get members directly from the controller
			List<Resident> members = householdController.getResidents(currentHousehold.getId());

			if (members == null || members.isEmpty()) {
				System.out.println("No members found for household ID: " + currentHousehold.getId());
				showInfoDialog("Thông tin", "Hộ khẩu này chưa có thành viên nào!");
				return;
			}

			System.out.println("Found " + members.size() + " members for household " + currentHousehold.getId());
			for (Resident member : members) {
				System.out.println("Member: " + member.getId() + " - " + member.getFullName() + " - " + member.getHouseholdId());
			}

			// Open member details dialog
			openMemberDetailsDialog(currentHousehold, txtHouseholdSize, members, () -> {
				try {
					updateAfterMemberDialog();
				} catch (ServiceException | HouseholdNotExist e) {
					System.err.println("Error updating after member dialog: " + e.getMessage());
					e.printStackTrace();
					showErrorDialog("Error", "Có lỗi xảy ra khi cập nhật thông tin: " + e.getMessage());
				}
			});

		} catch (ServiceException e) {
			System.err.println("Error getting members: " + e.getMessage());
			e.printStackTrace();
			showErrorDialog("Error", "Có lỗi xảy ra khi lấy thông tin thành viên: " + e.getMessage());
		}
	}

	private void openMemberDetailsDialog(Household household, TextField txtHouseholdSize, List<Resident> members, Runnable onSuccess) throws ServiceException {
		try {
			FXMLLoader loader = new FXMLLoader(getClass().getResource(Configs.RESIDENT_DETAILS_DIALOG_PATH));
			Parent root = loader.load();
			
			ResidentDetailsDialogHandler controller = loader.getController();
			
			// First set the controllers and services
			controller.setHouseholdController(householdController);
			
			// Then set the household which will trigger UI updates
			controller.setHousehold(household);
			
			// Set the members after household is set
			if (members != null && !members.isEmpty()) {
				controller.setResidents(members);
			}
			
			// Set additional UI components
			controller.setTxtHouseholdSize(txtHouseholdSize);
			controller.setHouseholdInfo(household.getOwnerName());
			
			// Set the callback last
			controller.setOnSuccessCallback(onSuccess);
			
			// Create and show the dialog
			Stage stage = new Stage();
			stage.setTitle("Chi tiết thành viên hộ khẩu");
			stage.setScene(new Scene(root));
			stage.initModality(Modality.APPLICATION_MODAL);
			stage.initOwner(btnMemberDetails.getScene().getWindow());
			stage.show();

		} catch (IOException e) {
			showErrorDialog("Error", "Không thể mở chi tiết các thành viên!");
			e.printStackTrace();
		}
	}

	@FXML
	private void handleClose() {
		// After successful update, call the callback
		if (onSuccessCallback != null) {
			onSuccessCallback.run();
		}
					
		System.out.println("Closing view household dialog");
		((Stage) btnClose.getScene().getWindow()).close();
	}

	// Utility methods for dialogs
	private void showErrorDialog(String title, String message) {
		Alert alert = new Alert(Alert.AlertType.ERROR);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}

	private void showSuccessDialog(String title, String message) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}

	private void showInfoDialog(String title, String message) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}

	// Utility methods for external access
	public boolean isInEditMode() {
		return isEditMode;
	}

	public void forceViewMode() {
		setViewMode();
	}

	public void forceEditMode() {
		setEditMode();
	}
}